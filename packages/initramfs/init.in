#!/bin/sh

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

EXPECTED_LABEL="lfslivecd-@VERSION@"
EXPECTED_LABEL="$EXPECTED_LABEL                                "
EXPECTED_LABEL=${EXPECTED_LABEL:0:32}
PATA=0
NEW_FIREWIRE=0

init=/sbin/init
root=
rootdelay=
rootfstype=auto
ro="ro"
rootflags=
noresume=0
resume=
all_generic_ide=0
toram=0
nodhcp=0
cdtype=

find_cd() {
	for SYS in /sys/block/hd* /sys/block/sr* ; do
		[ ! -d "$SYS" ] && continue
		[ -f "$SYS/media" ] && read MEDIA <"$SYS/media" && [ "$MEDIA" != "cdrom" ] && continue
		DEV=/dev/${SYS##*/}
		LABEL=`dd if=$DEV bs=1 skip=32808 count=32 2>/dev/null`
		[ "$LABEL" = "$EXPECTED_LABEL" ] && ln -s "$DEV" /dev/lfs-cd && break
	done
}

problem() {
	cat <<"EOF"
The problem may be caused by the fact that ISA IDE and SCSI adapters are
no longer attempted to be autodetected. If you use such hardware, load the
proper driver manually with the "modprobe" command and exit from this shell.
For old IDE controllers, the correct module name is "ide-generic", or, if
you want to use the new libata-based driver, "pata-legacy". To avoid this
message next time you boot this CD, use a kernel command line like this:
linux load=ide-generic

This problem can be also caused by a slow SCSI controller or USB/FireWire
CD-ROM that needs more time to be detected. If you see any kernel messages
below, this is the case. In this case, it is sufficient to type "exit",
and the CD will continue the boot process. To avoid this message next
ime you boot this CD, use a kernel command line like this:
linux rootdelay=20

Dropping you to a shell.

EOF
	sh
}

do_resume() {
	case "$resume" in
	*:*)
		echo "$resume" >/sys/power/resume
		;;
	/dev/*)
		if [ -b ${resume} ] ; then
			eval echo $( stat -L -c '$(( 0x%t )):$(( 0x%T ))' ${resume} ) >/sys/power/resume
			# MC syntax highlighting is buggy '
		else
			cat <<EOF
The specified resume device ${resume} doesn't exist.
Please fix this problem and exit this shell. If you don't want to resume,
type "exit".

EOF
			problem
			# Retry
			if [ -b ${resume} ] ; then
				eval echo $( stat -L -c '$(( 0x%t )):$(( 0x%T ))' ${resume} ) >/sys/power/resume
				# MC syntax highlighting is buggy '
			else
				cat <<EOF
The specified resume device ${resume} still doesn't exist.
Assuming that you don't want to resume.
EOF
			fi
		fi
		;;
	esac
}

copy_cd_to_ram() {
	echo "Copying LFS LiveCD to RAM. This will take several minutes..."
	mount -n -t iso9660 -o ro,norock /dev/lfs-cd /.tmpfs/.cdrom
	cat /fakecd.iso.head >/.tmpfs/.fakecd.iso
	dd if=/.tmpfs/.cdrom/root.img bs=2048 conv=sync >>/.tmpfs/.fakecd.iso
	# Update volume size
	vsize=`stat -c '%s' /.tmpfs/.fakecd.iso`
	vsize=$(( $vsize >> 11 ))
	printf $(printf '\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\n' \
		$(( vsize & 0xff )) $(( ( vsize >> 8 ) & 0xff )) \
		$(( ( vsize >> 16 ) & 0xff )) $(( ( vsize >> 24 ) & 0xff )) \
		$(( ( vsize >> 24 ) & 0xff )) $(( ( vsize >> 16 ) & 0xff )) \
		$(( ( vsize >> 8 ) & 0xff )) $(( vsize & 0xff )) \
	) | dd of=/.tmpfs/.fakecd.iso bs=1 seek=32848 conv=notrunc 2>/dev/null
	# Update compressed size
	csize=`stat -c '%s' /.tmpfs/.cdrom/root.img`
	printf $(printf '\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\\x%x\n' \
		$(( csize & 0xff )) $(( ( csize >> 8 ) & 0xff )) \
		$(( ( csize >> 16 ) & 0xff )) $(( ( csize >> 24 ) & 0xff )) \
		$(( ( csize >> 24 ) & 0xff )) $(( ( csize >> 16 ) & 0xff )) \
		$(( ( csize >> 8 ) & 0xff )) $(( csize & 0xff )) \
	) | dd of=/.tmpfs/.fakecd.iso bs=1 seek=47352 conv=notrunc 2>/dev/null
	# Update compression parameters
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=2 skip=12 seek=47473 conv=notrunc 2>/dev/null
	# Update uncompressed size
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=4 skip=8 seek=47475 conv=notrunc 2>/dev/null
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=1 skip=11 seek=47479 conv=notrunc 2>/dev/null
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=1 skip=10 seek=47480 conv=notrunc 2>/dev/null
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=1 skip=9 seek=47481 conv=notrunc 2>/dev/null
	dd if=/.tmpfs/.cdrom/root.img of=of=/.tmpfs/.fakecd.iso \
		bs=1 count=1 skip=8 seek=47482 conv=notrunc 2>/dev/null
	umount -n /.tmpfs/.cdrom
	losetup /dev/loop2 /.tmpfs/.fakecd.iso
	if [ -d /.tmpfs/.partition ] ; then
		losetup -d /dev/loop3
		umount -n /.tmpfs/.partition && rm -rf /.tmpfs/.partition
	fi
	ln -sf /dev/loop2 /dev/lfs-cd
}

detect_cd_type() {
	mount -n -t iso9660 -o ro /dev/lfs-cd /.tmpfs/.cdrom
	if [ -d /.tmpfs/.cdrom/lfs-sources ] ; then
		if [ "$toram" = 1 ] ; then
			cdtype=toram
		else
			cdtype=fullcd
		fi
	else
		cdtype=nosrc
	fi
	umount -n /.tmpfs/.cdrom
}


do_mount_cd() {
	while [ ! -b /dev/lfs-cd ] ; do
		find_cd

		if [ ! -b /dev/lfs-cd ] ; then
			cat <<"EOF"

LFS LiveCD could not find its device, perhaps due to unsupported or
undetected hardware. Please fix this problem and exit this shell.

EOF
			problem
		fi
	done
	mkdir /.tmpfs/.cdrom
	detect_cd_type
	if [ "$toram" = 1 ] ; then copy_cd_to_ram ; fi
	mount -n -t iso9660 -o ro /dev/lfs-cd /.tmpfs/.cdrom
	losetup /dev/loop0 /.tmpfs/.cdrom/root.img
	SIZE=`blockdev --getsize /dev/loop0`
	OVERHEAD=$(( 0x1000 + $SIZE * 2 ))
	OVLSIZE=$(( $SIZE + ( $OVERHEAD + 511 ) / 512 ))
	dd if=/dev/null of=/.tmpfs/.overlay bs=512 seek=$OVLSIZE 2>/dev/null
	losetup /dev/loop1 /.tmpfs/.overlay
	echo "0 $SIZE snapshot /dev/loop0 /dev/loop1 p 8" | dmsetup create lfs-cd
	mount -n -t ext2 /dev/mapper/lfs-cd /.root
	mount -n --move /.tmpfs /.root/dev/shm
	if [ "$toram" != 1 ] && [ ! -d /.root/dev/shm/.partition ] ; then
		cp -a /dev/lfs-cd /.root/dev/lfs-cd
	fi
	if [ "$toram" != 1 ] ; then
		ln -sf /dev/shm/.cdrom/drivers /.root/drivers
	fi
	cat /etc/modprobe.conf >>/.root/etc/modprobe.conf
	ln -sf issue.$cdtype /.root/etc/issue
	if [ "$cdtype" = "fullcd" ] ; then
		ln -sf /dev/shm/.cdrom/lfs-sources /.root/lfs-sources
	fi
	if [ "$nodhcp" = "1" ] ; then
		rm -f /.root/etc/udev/rules.d/76-network.rules
	fi
	( IFS="," ; for module in $load ; do
		echo "$module" >>/.root/etc/sysconfig/modules
	done )

}

do_mount_iso() {
	DEVICE=${root#iso:}
	FILE=${DEVICE#*:}
	DEVICE=${DEVICE%%:*}
	mkdir /.tmpfs/.partition
	while [ ! -b "$DEVICE" ] ; do
		cat <<EOF

The device ${DEVICE}, which is supposed to contain a file
with the ISO9660 image of the LFS LiveCD, does not exist.
Please fix this problem and exit this shell.

EOF
		problem
	done
	if ! mount -n -t "$rootfstype" -o "$rootflags" "$DEVICE" /.tmpfs/.partition ; then
		cat <<EOF

Could not mount device ${DEVICE}
(but it does exist, please mention this when asking for support).
Sleeping forever. Please reboot and fix the kernel command line.

Maybe you have put the ISO9660 image of the LiveCD onto a partition
formatted with an unsupported file system?

Or maybe filesystem type autodetection went wrong, in which case
you should add rootfstype=... to the kernel command line.

Available partitions:
EOF
		cat /proc/partitions
		while true ; do sleep 10000 ; done
	fi
	if [ ! -f "/.tmpfs/.partition/$FILE" ] ; then
		cat <<EOF

The file ${FILE} does not exist on the device ${DEVICE}.
Sleeping forever. Please reboot and fix the kernel command line.

Maybe you have specified a wrong device or file name? Does the following
list of files on the partition look right?
EOF
		( cd /.tmpfs/.partition ; ls )
		umount -n /.tmpfs/.partition
		while true ; do sleep 10000 ; done
	fi
	losetup /dev/loop3 "/.tmpfs/.partition/$FILE"
	ln -sf /dev/loop3 /dev/lfs-cd
	do_mount_cd
}

do_mount_root() {
	mkdir /.root
	[ -n "$rootflags" ] && rootflags="$rootflags,"
	rootflags="$rootflags$ro"
	case "$root" in
	iso:*)
		mkdir /.tmpfs
		mount -n -t tmpfs -o size=90% tmpfs /.tmpfs
		do_mount_iso
		;;
	/dev/*)
		while [ ! -b "$root" ] ; do
			cat <<EOF
The device ${root}, which is supposed to contain the
root file system, does not exist.
Please fix this problem and exit this shell.

EOF
			problem	
		done
		if ! mount -n -t "$rootfstype" -o "$rootflags" "$root" /.root ; then
			cat <<EOF

Could not mount device ${root}
Sleeping forever. Please reboot and fix the kernel command line.

Maybe the device is formatted with an unsupported file system?

Or maybe filesystem type autodetection went wrong, in which case
you should add the rootfstype=... parameter to the kernel command line.

Available partitions:
EOF
			cat /proc/partitions
			while true ; do sleep 10000 ; done
		fi
		;;
	*:*)
		( IFS=":" ; mknod /dev/root b $root )
		if ! mount -n -t "$rootfstype" -o "$rootflags" /dev/root /.root ; then
			cat <<EOF

Could not mount device $root
Sleeping forever. Please reboot and fix the kernel command line.

Maybe the device is formatted with an unsupported file system?

Or maybe filesystem type autodetection went wrong, in which case
you should add the rootfstype=... parameter to the kernel command line.

Available partitions:
EOF
			cat /proc/partitions
			while true ; do sleep 10000 ; done
		fi
		;;
	"")
		mkdir /.tmpfs
		mount -n -t tmpfs -o size=90% tmpfs /.tmpfs
		do_mount_cd
		;;
	esac
}

mount -n -t proc proc /proc
mount -n -t sysfs sysfs /sys

read -r cmdline </proc/cmdline

( IFS="," ; for module in $blacklist ; do
	echo "blacklist $module" >>/etc/modprobe.conf
done )

for param in $cmdline ; do
	case $param in
	*.*=*)
		module=${param%%.*}
		option=${param#*.}
		echo "options $module $option" >>/etc/modprobe.conf
		;;
	ide=*|idebus=*|ide[0123]=*|hd[a-z]=*)
		ide_core_opts="$ide_core_opts $param"
		;;
	pata)
		PATA=1
		;;
	new_firewire)
		NEW_FIREWIRE=1
		;;
	all_generic_ide|all-generic-ide)
		all_generic_ide=1
		;;
	init=*)
		init=${param#init=}
		;;
	root=*)
		root=${param#root=}
		;;
	rootdelay=*)
		rootdelay=${param#rootdelay=}
		;;
	rootfstype=*)
		rootfstype=${param#rootfstype=}
		;;
	rootflags=*)
		rootflags=${param#rootflags=}
		;;
	ro)
		ro="ro"
		;;
	rw)
		ro="rw"
		;;
	noresume)
		noresume=1
		;;
	resume=*)
		resume=${param#resume=}
		;;
	toram)
		toram=1
		;;
	nodhcp)
		nodhcp=1
		;;
	esac
done

if [ -n "$ide_core_opts" ] ; then
	# remove the extra space from the beginning
	ide_core_opts="${ide_core_opts# }"
	echo "options ide_core options=\"$ide_core_opts\"" >>/etc/modprobe.conf
fi

case "$PATA" in
	0)
		for driver in /lib/modules/`uname -r`/kernel/drivers/ata/pata_*.ko ; do
			drv=${driver##*/}
			drv=${drv%.ko}
			echo "blacklist $drv" >>/etc/modprobe.conf
		done
		echo "install ata_piix /sbin/modprobe piix ; /sbin/modprobe -i ata_piix" >>/etc/modprobe.conf
		;;
	1)
		for driver in /lib/modules/`uname -r`/kernel/drivers/ide/pci/*.ko ; do
			drv=${driver##*/}
			drv=${drv%.ko}
			echo "blacklist $drv" >>/etc/modprobe.conf
		done
		echo "blacklist ide-cs" >>/etc/modprobe.conf
		;;
esac

case "$NEW_FIREWIRE" in
	0)
		for driver in /lib/modules/`uname -r`/kernel/drivers/firewire/*.ko ; do
			drv=${driver##*/}
			drv=${drv%.ko}
			echo "blacklist $drv" >>/etc/modprobe.conf
		done
		;;
	1)
		for driver in /lib/modules/`uname -r`/kernel/drivers/ieee1394/*.ko ; do
			drv=${driver##*/}
			drv=${drv%.ko}
			echo "blacklist $drv" >>/etc/modprobe.conf
		done
		;;
esac

if [ "$all_generic_ide" = 1 ] ; then
	echo "options generic all_generic_ide=1" >>/etc/modprobe.conf
	echo "options ata-generic all_generic_ide=1" >>/etc/modprobe.conf
fi

udevd --daemon --resolve-names=never

( IFS="," ; for module in $load ; do
	# Some modules exist only on the main CD filesystem.
	# Suppress the error about them not being found.
	modprobe -q "$module"
done )

udevadm trigger
udevadm settle
if [ "$all_generic_ide" = 1 ] ; then
	if [ "$PATA" = 0 ] ; then
		modprobe generic
	else
		modprobe ata_generic
	fi
	udevsettle
fi

if [ -n "$rootdelay" ] ; then sleep "$rootdelay" ; fi

[ "$noresume" = 0 ] && do_resume
do_mount_root

killall -w /sbin/udevd

umount /sys
umount /proc
cd /.root
# Clean up and free some memory
rm -rf /bin /sbin /lib /sys /proc /dev /.tmpfs /init /fakecd.iso.head
./lib/@LINKER@ --library-path ./lib ./bin/mount -n --move . /
exec ../lib/@LINKER@ --library-path ./lib ./usr/sbin/chroot . "$init" "$@"
